[ { "title": "The Basics", "url": "/posts/thebasics/", "categories": "General Information", "tags": "essential, batch", "date": "2023-12-10 00:00:00 +0000", "snippet": "Important InformationRequired Software Unreal Engine 4.27 (Link to download) FModel (Link to github) UAssetGUI (Link to github) Understanding the File Structure When creating a project in Unreal Engine 4, the project will be saved to a directory. Within that directory will be the project. For example: &lt;SaveDirectory&gt;/&lt;ProjectName&gt;/…. &lt;ProjectName&gt; houses all of the contents of the Unreal Engine 4 project. In that project folder, there will be a subfolder named Content. That folder houses all of the assets and blueprints within a game. In the case of Into the Radius, the project name is IntoTheRadius. Within that folder, there is a folder called Content. Again, this houses everything inside a game except for configuration files. However, note that when you open the game files in UModel, there may not be a Content folder. Instead, it’ll have been replaced with a Game folder.The majority of the modding that you will do will be under the Content folder. If a file that you are looking to override is in .../IntoTheRadius/Game/ITR/Configurations/Infos/DT_ItemInfos, the file path to copy would be .../Content/ITR/Configurations/Infos/DT_ItemInfos. Failure to copy the exact path of Into The Radius will result in a broken mod.File FormatsThere are multiple different file formats that you may encounter while modding. Here is a list of most of them, and what each of them are. .psk - A skeletal or static mesh. May contain the skeleton. .psa - An animation for a specific mesh. .uasset - Two types. Raw .uasset files are the ones created after cooking a UE4 project. UE4 .uasset files are the ones that are taken directly from a UE4 project, they are uncooked and can be transferred between projects. .uexp - An raw complementary file to uassets, usually containing import and export maps. .ubulk - Another data storage file that UE4 uses. .umap - A level/map file, similar to .uasset in the way that there is an uncooked and cooked version.Method 1: Extract and RepackThis method works best for simple tweak mods.Extracting Game FilesThere are two methods of extracting games files, both have important differences: FModel. Fmodel is an advanced browser for Pak files. Upon opening Fmodel, you will see something like the screenshot below. Open theEach entry on the left menu is for one .pak file. pakchunk0-windowsNoEditor.pak is the native game. Any others you see here are mods. Fmodel can be used to look at and export both native and modded files. Double click on pakchunk0-windowsNoEditor.pak and click on the folders tab. Here you can navigate to whatever content it is you want to change. For example, if you wanted to change what enemy spawns at the start of Pervomay Route, you would navigate to IntoTheRadius\\Content\\ITR\\Levels\\Zone\\Buffer. Once here, click on the Packages tab and double click on L_Zone_Buffer_Monsters.umap. Now in the right pane, you can read through everything in the .umap file but you can’t edit it. To make any changes you have to export it. Right click on L_Zone_Buffer_Monsters.umap and click Export Raw Data. UModel. This program can extract non-raw files, allowing you to gain access to textures, models, animations, and sounds. To use it, direct it towards the location of the .pak files within Into the Radius: &lt;GameInstallLocation&gt;\\IntoTheRadius\\IntoTheRadius\\Content\\Paks. You’ll be able to extract individual assets once loaded. Note the you will need to cook assets you extract using UModel.Simple File ModificationsFor small/simple mods, UAssetGUI is the easiest way to make changes to files. Just be aware that mods created in this way will be completely incompatible with other mods which modify the same file. To start, open UAssetGUI and click file&gt;open. As an example, you can open L_Zone_Buffer_Monsters.umap from where it was exported by FModel earlier. Click on the boxes to expand nodes. Here we will navigate to BP_MonsterSpawner2 (pervomay 1st mission house) which you can see is currently a spawn location for a fragment.If you simply wanted to change the spawn to something else you could double click the box where it says NPC.Monster.Fragment and replace it with the enemy you want. However, for this example, we want to make it a 10% chance a fragment spawns and a 90% chance a mimic policemen spawns. To do this, we need to add a new row to the first Monsters node. Click the Monsters(1) node and click any row in the table. Once it is highlighted, copy and paste it to add a new row.Now to get UAssetGUI to register the new row, you need to click View&gt;Recalculate Nodes. Navigate to the node you were editing and you should now see two Monsters nodes under the main Monsters node. One is for the original and one is for the new row you created. At this point, you should also save. Now we just need to fill in the new node. In the value column row 1, enter a value of 9. Then fill out the key node to look the same as the original node, but with NPC.Monster.Mimic.PM in place of NPC.Monster.Fragment.Creating a PAK FileThere are two main ways of packing mods for into the radius.1. UnrealPakGUITo set it up, make sure Engine Dir points to your unreal engine installation and make sure UProjectFile points to the intoTheRadius.UProject we exported in Fmodel earlier. Drag and drop the .umap and .uexp files we modified in UAssetGUI into the UnrealPakGUI window. Also make sure you deselect the encryption option in the top right. Once everything if configured as shown below you can click create pak. **IMPORTANT: MAKE SURE YOU HAVE _P AT THE END OF YOUR FILENAME, AND MAKE SURE THERE ARE NO SPACES IN THE FILE PATH WHERE YOU SAVE THE .PAK**2. ITR_PackerUnfortunately, UnrealPakGUI refuses to read new tag files which you may use for custom items. This is where a somewhat complicated setup shown to me by Saedriss comes in.Create a new folder for your pak file. Make sure there are no spaces in the file path. Now create a blank notepad file called ITRPacker.txt (or something else).Open it up and add the following lines:\"PATH_TO_YOUR_UNREAL_ENGINE_INSTALLATION\" PATH_TO_FOLDER_YOU_CREATED_FOR_THE_PACKER\\NAME_FOR_YOUR_PAK_FILE.pak -create=PATH_TO_FOLDER_YOU_CREATED_FOR_THE_PACKER\\to_pak_ITR_packer.txt -patchpaddingalign=2048 -multiprocesspause Now save the notepad file, and rename it from a .txt file to a .bat file.Next, create a blank text file called “to_pak_ITR_packer.txt”. Open it in notepad. Add the following lines. If you aren’t adding any custom tags you can ignore that line. \"PATH_TO_YOUR_MODDED_TAG_FILE\\YOUR_TAG_FILE.ini\" \"../../../IntoTheRadius/Config/Tags/YOUR_TAG_FILE.ini\" \"PATH_TO_YOUR_INTO_THE_RADIUS_CONTENT_FOLDER\" \"../../../IntoTheRadius/Content/\"Method 2: Using ChuckSharts’s ITR-SDKThanks to ChuckSharts working through the process of uncooking much of the game and building and SDK, we can now do a significant portion of modding using unreal engine directly. Just download the SDK and make your modifications. Once you’ve made your modifications, just cook your assets, and package the specific assets you’ve modified.Simple ExampleFor this example, we will make the Makarov PM pistol one shot every enemy in the game.DataTable ChangesFirst download the SDK and open it up with unreal engine 4.27. Navigate to Content\\Mods\\ModdedData in the content browser. Create a new DataTable and set the row structure to WeaponInfo. Give the dataTable a name (I called mine DT_OP_Makarov_WeaponInfos). Now navigate to Content\\ITR\\Configurations\\Infos and open DT_weaponInfos. In DT_weaponInfos, find the row for the PM and copy it. Then open the new dataTable you created and paste the row for the PM into it. Now click on the row for the PM, and find the entry for ammo damage. Change the value from 15 to 500. Save the dataTable.Now we need to add our dataTable to the list the game uses. In the SDK, we use Composite data tables to make mod compatibility as easy as possible. Navigate to Content\\Mods\\ModdedData\\CompositeDataTables and open DTC_WeaponInfos. In parent tables, add a new element and set the new blank entry to your new dataTable.CookingBecause we’re working from unreal engine, the files need to be cooked before they can can be packaged. First go to file\\Package Project\\Packaging Settings. Navigate down to “Directories Never to Cook” (it may be hidden under a folder). Here we want to add any folders which we aren’t using. So because we aren’t doing any ART modifications, the folders ART, ART2, and ITR_art can be added.Now cook the project by clicking file\\PackageProject\\Windows(64bit). If you have any errors (shown in red on the console), navigate to the asset it points to and either delete the asset or delete whatever inside the asset is causing the error (or fix it). For example, when I downloaded the SDK, I had to go to Content\\ITR\\BPs\\Items\\Weapons\\Primary\\AKM\\BP_Mag_AKM.uasset and remove the scene10 node from the event graph in the BP.Now you can finish the mod by using one of the packing processes outlined earlier in this article. For this mod the specific files you need are “DT_You_Created”.uasset (located at WindowsNoEditor\\IntoTheRadius\\Content\\Mods\\ModdedData), DTC_WeaponInfos.uasset (WindowsNoEditor\\IntoTheRadius\\Content\\Mods\\ModdedData\\CompositeDataTables), and DA_InfosConfig.uasset (WindowsNoEditor\\IntoTheRadius\\Content\\ITR\\Configurations). Make sure your file structure when packing is the same as the file structure in unreal engine. Also make sure you only pack the files you need.You should now be able to install the mod and have an OP makarov in game.Additional InformationMod InstallationAll .pak mods go here. &lt;GameInstallLocation&gt;\\IntoTheRadius\\IntoTheRadius\\Content\\Paks. Ensure that the .pak load order is correct.DebuggingIf your mod is not working, make sure to check these common error points: Check the file strucuture. This must perfectly match the files within the game, otherwise it will not load. There must be a _P at the end of the mod name. This is needed when a patch pak is used for the main game files. Load order. Incorrecy load order may cause issues between mods, change the numberical elements of the pak name to change the load order. Mount point (The best way to debug any issues is to use the builtin UnrealPak.exe. Simply open this with cmd with the line: unreakpak.exe -List This_Is_A_Pak.pak. Look at the mounting point. The mounting point will be the deepest folder that encapulates all of your content. If it is not, you may have an issue.)" }, { "title": "Quick Cook Setup", "url": "/posts/quickcook/", "categories": "Map Modding", "tags": "maps", "date": "2023-01-18 23:00:00 +0000", "snippet": "This is a guide to setup and use the quick cook editor scripting widget.The widget automates repetitive cooking, copying, paking and starting the game to load a specific level. Also supports seperate profiles for maps or mods.Quick Cook Setup: Download the .zip containing the widget and python dependencies. Extract the .zip contents into your UE4 Project’s content folder so that you have two subfolders as shown; .../Content/QuickCook .../Content/Python Restart UE4 if it was open to ensure the new python modules are available. In UE4; Navigate to /Content/QuickCook/ in the content browser. Then right-click \"QuickCook\" and select \"Run Editor Utility Widget\" Fill out the configuration to match your setup for: Project Folder: Should be your covered bones folder etc containging the .uproject Staging Folder: Should be the parent of the after-cooking copy folder which you use with UnrealPak.exe to create .paks. This should be the parent folder of your pakchunk99-YOURMOD folder etc. Unreal Engine Dir: Should be where your engine files for UE 4.27 are located. Game Folder: Should be the top directory of your Ready Or Not game installation. {: .left } This configuration will be saved and loaded automatically to your UE4 Project’s directory at;...\\Saved\\QuickCook\\QuickCook.cfg You should add /Content/QuickCook/ to your “Directories to never cook” in your project settings.Quick Cook Usage: This widget doesn’t modify or bypass your project’s “Directories to never cook” or “List of maps to include in a packaged build” Therefore, please ensure you have manually cooked, named your staged mod folder and paked it successfully before using this tool.Profiles: Open your map. Opening a map will try to load a profile with matching name. To create your own, under “PAK NAME” enter your staging folder name (i.e. your pak name without .pak) In the right field enter your map name excatly as seen in the top-left tab or content browser. Press the Save button. Profiles are saved as .ini files in the project’s ...\\Saved\\QuickCook\\ Add the folders you wish to be synced when pressing the Copy button from ...\\Saved\\Cooked\\ to the profile’s folder within “Staging Folder”Although you can’t drag folders from the content browser, you CAN drag an asset within on to the None next to “Drag Here to Add” to quickly add their parent folder. Press Save Folders are copied relative to .../Saved/Cooked/WindowsNoEditor/ to allow copying Engine content if needed.The popular pak.bat includes /ReadyOrNot/ which these tools wont work with.To modify an existing staged folder simply make sure your cooked copy of /Content/ is inside a /ReadyOrNot/ folder.Eg; .../pakchunk99-YOURMOD/ReadyOrNot/Content/To modify your pak.bat simply replace \"../../../ReadyOrNot/\" with \"../../../\" The Copy Button uses the dirsync python command syncThis syncs folders one way and only if files have changed data rather than by date to increase speed.Usage Notes: For Play to work correctly ensure QuickMap is installed and configured. Check box state and gamemode selection state is saved to config, not profile. Check boxes below Copy, Pak and Play allow the tool to continue after the button to the left has finished it’s action.This let’s you in one click, press cook, then (after some time) automatically spawn in your level in game with a chosen gamemode. Freemode skips the 10 second game countdown and disables AI. No loadouts are loaded. Teleport requires a /QuickCook/QuickTeleport blueprint placed in your level. If ticked, it will move your player in Freemode to your UE4 viewport camera’s location Windowed requires a /QuickCook/QuickTeleport blueprint placed in your level. If ticked, it will run r.SetRes with the selected optionsQuickMap SetupQuickmap is an empty level that can be loaded before the game’s MainMenu level to enable extra game launch parameter options such as level loading. Download the pakchunk99-QuickLoad.pak from here or Nexus Mods or mod.io If in a .zip, extract it, then copy it your game’s pak folder like any other mod. /Ready Or Not/ReadyOrNot/Content/Paks/ Open %localappdata%\\ReadyOrNot\\Saved\\Config\\WindowsNoEditor\\Engine.ini Add an empty line then add this override; [/Script/EngineSettings.GameMapsSettings]GameDefaultMap=/Game/QuickCook/QuickMap.QuickMap Save the Engine.ini Be sure to remove this line, or update QuickLoad after a major update if the MainMenu level name changes." }, { "title": "Map Modding", "url": "/posts/mapmodding/", "categories": "Map Modding", "tags": "maps", "date": "2022-08-07 12:00:00 +0000", "snippet": "Map ModdingSpecial thanks to:ACowBoyBishop#7664 and Vegriv#8646 for testing and help! Thanks to matthew9324#3567 for C++ help and RoN Dev Zack Bower#0466 for FMOD integration.Guide written by The Real Sourc3#7480.If you need help don’t hesitate to visit the RoN Custom Maps Discord and tag me :)I heavily advise to watch the videos related to the newest Covered Bones template on Nexus.Folder StructureFolder structure in UE4 4.27.2 needs to be as shown under to work. Content is the base folder your UE4 projects starts from.YourProjectName is only a placeholder for what you name your project when you make it in the New Project menu in Epic’s UE4 Launcher.The project name for the Meth house map for example is listed as RoN_Meth.To make a map you should start by downloading the newly updated Covered Bones Mapping template from NexusIt includes all the C++ files and Folder Structs like listed below and should provide you with a strong basis to start map modding.The Folder struct below is only the nessescary files required for the map to work (using all features) but the Covered Bones includes more files for conveniency.To distinguish the old Bare Bones from the new updated template, it’s now called Covered Bones.Content BlueprintSpawners BP_Door.uasset bp_door_reap.uasset CustomGameModeOverride.uasset BP_GameModeOverride.uasset BombSpawner.uasset BP_SpawnEvidence.uasset BP_SpawnActor.uasset BP_SpawnSelectedActor.uasset Blueprints DataTables DoorDataTable.uasset DoorType.uasset TrapDataTable.uasset AI_DataTable.uasset AI_DataTable_V3.uasset AI AI_DataTable_Club.uasset AI_DataTable_DataCenter.uasset AI_DataTable_Dealer.uasset AI_DataTable_Farm.uasset AI_DataTable_Gas.uasset AI_DataTable_Hospital.uasset AI_DataTable_Hotel.uasset AI_DataTable_Importer.uasset AI_DataTable_Meth.uasset AI_DataTable_Penthouse.uasset AI_DataTable_Port.uasset AI_DataTable_Ridgeline.uasset AI_DataTable_Valley.uasset Environment BP_Door_New.uasset IncapacitatedHuman.uasset Gameplay COOP BP_BombActor.uasset COOPModes GM_COOP_ActiveShooter GM_COOP_BarricadedSuspects GM_COOP_BombThreat GM_COOP_HostageRescue GM_COOP_Raid Games GM_COOP.uasset Logic MethLogic BP_Evidence_Meth_Contraband.uasset BP_Evidence_Meth_Contraband_2.uasset PortLogic BP_Evidence_Port_Dossier.uasset RidgelineLogic BP_Evidence_Ridgeline_Ricin.uasset ValleyLogic BP_Evidence_Valley_HardDrive.uasset BP_Evidence_Valley_HardDrive_02.uasset BP_Evidence_Valley_Laptop.uasset Sound Unused ModMusic_BP.uasset ModSound_BP.uasset E_WorldGenType.uasset FMOD // Sound banks and events located here Mods YourProjectName (CoveredBones) Levels // To make your level appear mod main menu place it here: YourMapName.umap YourMapName_BuildData.uasset MoreDoor.umap MoreDoor_BuildData.uasset // Custom models, materials and textures are placed here in sorted folders. ReadyOrNot Data // Misc useful data items are located here Project SettingsProject settings are important when making maps. They tell the engine how to interact with the assets and how they are cooked. When making maps you will need to change some of these to fit what content you want to include in your map. Some of the stuff are not optional. They will break certain elements of your game if they’re cooked. Don’t worry though - it’s nothing permanent.Go to the top to Settings drop down button and pick Project Settings (2nd from the top).Navigate to Packaging and scroll down to Ini Section Blacklist - there will be a tiny bar with an arrow on it to expand the menu further. Click on it and scroll down to Directories To Never Cook and add 2 array elements. Edit them with the 3 dots to this:The Folders in the Bare Bones Template that need this treatment are:(!! Ignore the /Game/Materials and /Game/ReadyOrNot/Assets/Shared if they’re not there !!)For custom materials to work we need to edit some Packaging settings that can be found in Project Settings.Look for the tick box called Share Material Shader Code and make sure it is NOT ticked. It should be ticked off in the BB template by default.You’re then free to use all kinds of materials with both translucency and emissive properties without the need of instancing game master materials, making Quixel and Megascans importing a lot more user friendly.GameModesBlueprints must be constructed manually as no blueprints can be imported from the base game.With the Bare Bones project the gamemode blueprint will be called GM_COOP.If you don’t have one, create an empty GameMode from the GameMode base class and rename it, then place it in the corresponding folder structure listed above.GameMode Override:At the top of your editor screen you will find the Blueprints tab, where you can edit Asset Blueprints and World Blueprints. In order for your game to work you must override the default gamemode and pick World Override: and pick the GM_COOP gamemode blueprint class.I have added a new way to set the gamemode as by default the game comes with Barricaded Suspects and Raid as the only available game modes. This tool is found in BlueprintSpawners and is called GameModeOverride. It does what it says - override the gamemode - and thus that gamemode will be the only gamemode for the level, despite what it says on the map in the lobby. This asset is dragged out somewhere in your level (doesn’t matter where) and you select your intended game mode and provide the literal map name as it appears top left on the tab in the editor. If you want the game to be Bomb Threat you should also add up to 2 BombSpawner.uassets in your level that spawns vanilla game defusable bombs in the level.World Geometry:If you make a new level instead of using the template’s included test map, just note that the standard level of UE4 includes a floor which is a static mesh. This will usually not show up in-game and you’ll fall through the world upon launch.If you want static / physics meshes in your world you must either reference base game meshes under the ReadyOrNot folder or provide your own in the correct folders.For prototyping or if you don’t have access to a lot of high poly assets it can be desirable to use BSP brushes. These are usually just convex hull geometry that you can piece together. You can actually make most of your map with this, then add models to enhance the level afterwards. I included some basic materials too to get you going.To make a walkable floor you have to use the Place Actor menu’s Geometry tab and choose the Box primitive.Use the right side menu to adjust the size of the floor or use the Brush Editing Mode (Shift + 4) to adjust the shape and size of your primitive.You only really need a floor, but it can be favorable to include walls and ceilings to get a sense of scale as well as for AI generation.A trick would be to use the included SM_Farm_Door_A door model to align doorways and ceilings for the scale.LightingInclude at least one light if not using the “sun” light standard to the scene. This helps bake the correct lightdata on your geometry. Without any light you can sometimes recieve weird shadow artifacts or weird colors. This also helps those weird people who don’t put any attachments on their guns.I added the GoodSky asset pack from UE4 Marketplace into the template, because it’s really handy to configure day/night using it; even adding a thunderstorm in a few clicks.In addition to that you’d need to place a Directional Light into the level for the actual light.You can add multiple lights in your scene, but adjust the Attenuation Radius so that too many don’t overlap. UE4 is very limited when it comes to light overlapping, so you’ll need to tinker with this to get a good feel for it.If a red X is displayed on the light it will not render in the final product or be glitched.World Generation and AI NavigationWorld Gen:This is probably one of the more complex steps as it involves messing a bit with the World Blueprint so I made the title a bit bigger.In the new update the devs added world generation to custom maps so I will need to test a bit with that, but the previous way to go was to include RosterScenarioSpawner and WorldDataGenerator C++ Actors in the map so that they would generate these points. The Bare Bones template should already have this included but if it doesn’t or you create a new map from scratch you’ll need to add these manually by going to the bottom of the Content section and look for C++ Classes and dragging these out into your world.(Still need to add more info to this chapter - unfinished)Navigation:To make the AI know which part of your map is intended to walk on you’ll need to set up a volume that touches the floor that you want them to be able to navigate.This volume is called Nav Mesh Bounds Volume and can be found in the Volumes Tab in Place Actors. This volume should ideally intersect the walkable floor. Navigation area only generates inside of this volume so make sure that all your walkable floor is encompassed in this volume. It also doesn’t matter if the volume is sticking out underneath of the floor or is not the same size, the engine pulls navigation info from the Project Settings when it generates paths.After building the paths from the Build button you can display the walkable paths generated by pressing P.Adding Props / Models Locate the prop[s] that you want to use on your map. These will have the .uasset format as any other file. However, make sure the .uasset you are looking at is the static mesh, not texture file or anything else. You can verify this by opening that file in UModel. If the class says StaticMesh, you’re good to go.An easier route is to download the Mapping Reference Project made by RareKiwi and delete the assets from folder after cooking. Make the folder struct the same as the asset file path. Go to Place Actors &gt; Basic and drag the Cube to the Content Browser and click Copy Here. You can use this in your level wherever and upon loading into your map, this will turn into the appropriate asset. Only go beyond this step if you want to see the asset within the editor. Export the static mesh you want to use as a .psk using UModel. Using Blender and the .psk plugin for it, export the model as a .fbx. Import the .fbx into UE4 with the same name as the asset you are attempting to use within your map. Make sure the file is in the same directory as the sibling file in the game files.Adding DoorsTo get a door into the game you place all the provided files into the folder structure as shown above.Set up the BP_Door in the Blueprint Editor under BeginPlay like this:Blueprint Pastebin - BP_DoorThis will make a BP_Door_New entity be spawned at the location of this blueprint with all the provided variables from BP_Door.The BP_Door gets these variables from the DoorDataTable and the TrapDataTable - so if you can’t see these variables be sure to look on the right side and see that the Data Table is linked to the blueprint.The red arrow in the BP shows which way the trap will be placed and marks the back side of the door. Place an instance of BP_Door onto the map and change the desired values: Door Type: Use the DoorDataTable in the data table block and select the wanted door. Trap Type: Doors can have pre-attached traps. The types to choose from comes from the TrapDataTable and are Explosive, Flashbang, Alarm, NoTrap. Note that the NoTrap doesn’t disable the trap, it makes it random. Lockchance, can be 0.0 - 1.0 We’re unsure if this value does anything, but we would expect higher probability of locking the closer to 1. Lockable: If the door can be locked or not. If you want a door to always be open you tick this box to False. NoSpawnTrap: If ticked it will disable any traps from pre-attaching to this door. Leave unticked if you want the TrapType to propigate. UseBrokenDoorMesh: We’re unsure if this does anything other than spawning the ruined door from the training course in the lobby map. MinOpenClose / MaxOpenClose: Probably has something to do with the max angle the door can swing, but I have yet to notice any difference after changing these values.. Evidence ActorsIf you’ve played the game for more than 5 minutes you may have come across the different kinds of evidence that you can pick up in the world. These are the smaller kinds of objects that are linked to drugs, videos/photos, lists and more. In the new Covered Bones there is a provided blueprint to spawn these kinds of actors.Simply drag out one BP_SpawnEvidence.uasset per evidence actor into your desired location in your map, and select your preferred evidence (oh and due to my negligence the white and red meth bags were swapped on the list - whoops)The evidence types should have intuitive icons when you select between them :)MultiplayerMultiplayer works by default if you place enough spawn points in your map. This spawn point is called PlayerStart and you’ll need at least 5 for normal multiplayer function.Building and CookingAt this point the map should be ready for rendering and packaging (you don’t really need doors but maps are very lacklusting without).You firstly need to Build the data into the map by pressing the Build button at the top of the screen. It will take some time to finish.Once it is done you can cook the files.You cook the map so that the game can recognise the level as a playable map.Before cooking be sure to select the Content folder as the cooker will cook everything down from that folder.Go to top left at File and choose under Project -&gt; Cook Content For Windows.The cooked project will be located in your projects folder under &lt;yourprojectname&gt;/Saved/Cooked/WindowsNoEditor/To make the map appear in game you must pak the project folder with the pak bat file mentioned in The Basics.Only pak the Project folder with the Content folder inside, not the MetaData or AssetRegistry and it should work from the mat :)Name the pak to pakchunk99-Mods-&lt;yourprojectname&gt;_P - Replace the brackets and what’s in them with your project’s name.For now, delete the FMOD folder from your cooked folder unless you are testing FMOD stuff. And if you do, delete everything except your custom banks and events.If you don’t delete game-default assets everything from the game will be overwritten with empty data since the banks in this folder are only for reference.That will result in your game having no sound other than VO.MaterialsTo “paint” your walls/models/etc. you’ll need it to display a material. A material in UE4 is a set of textures layered on top of eachother to display color, depth and light interaction. Inside the asset it uses a block with nodes attached to it to get the information. This information is set up in a visual Blueprint form to make the process easier.You drag connections between the material attributes nodes to link them together. I have added a TV simulated material woth a bunch of cool layering to convey a realistic look that you’re free to use, mix n’ match.To paint an object you can drag the material from the content browser out onto the surface directly or use the side menus and select multiple surfaces to paint at the same time.Chapter not finished.Post Processing and visual techPost processing in UE4 is the method to give your maps the extra umph and sell the immersion visually. It’s how you get areas to feel different and lift the ambience for the player. The goal of post processing is to enhance what’s already there to reflect your intended visuals. I might be a little cryptic here, but that’s for the better.Let’s examplify this: If your lore is set in the Middle East it would not make sense that the light has the same color as it does further north like UK, it might be a little orange-shifted to give the “desert-feel”. Maybe you want some fog and haze to emulate distant sandstorms.Or enhanced clarity. Maybe the lighting is dialed in right for realism, but has the wrong color, saturation and contrast. Take a look at this basic example:I can’t tell you what exactly you should do for your map to look real. It is very contextual, so it varies from map to map. But I can tell you how certain elements work to achieve some effects. The first element that you should have to enable custom post processing is most obviously a Post Process Volume actor. It allows you to change a lot of values regarding filmic and rendering. It contains a long set of variables that you can change to get the desired effects:For the most part we will use what’s in the Color Grading section, because it has the most effect. Scrolling down to Color Grading Changing Temperature, Tint and Saturation, Contrast, Gain, Gamma will be our main focus point. Most scene “moods” can be achieved here..Note that the effects in Global has a drop down to change overall values more specifically, and for the most part we should only care about the slider under the color-cirle to change the value of that parameter. If you need to do some color balancing in that area you’d mostly want to do it in Saturation and Gain.FMOD Sound Integation(WIP)For this you’ll need FMOD for UE4 If you don’t know how to install FMOD visit the RoN Custom Maps Discord and check out the Guides Links or watch THIS VIDEOWhen you have installed FMOD correctly, you can make sound come into your map by placing a FMOD Audio Player from the Place Actors menu. You’ll also need to reference a sound that’s already in game* for it to play. If you want this sound to always play regardless of your location (like theme music) you don’t really need to do anything but to check that the “Start Activated” checkbox is ticked.To get the sounds from Ready Or Not into unreal editor for referencing and preview (yes you can preview the audio!) you need to copy over some banks from the game’s directory into your project. Navigate to your Steam/Steamapps/Common/Ready Or Not/ReadyOrNot/Content/FMOD/Desktop folder and select all the bank files in the folder and copy them.Then go to your project and go to the Content/FMOD/Desktop folder and paste in the banks…Navigate to the Events folder to verify that it works, you should be able to double-click an asset and preview the sound in the editor.If you want to make a dynamically changing ambience based on the area you enter you will need to use a simple blueprint actor for this. I covered that briefly in the video above, but the idea is to blend or stop all other ambiences when you step into a new one. Using a box collision that only overlaps the Pawn channel will make the triggering happen. To fade in a sound you can use a timeline to manipulate the volume but ideally you want to fade in based on the distance to the other ambience actor but for normal cues 2 seconds of fade time will do.For sound transitioning there is a transitioning volume located in Mods/Audio/Atmos that you can use to simplify this process - with that actor you can select what sound you transition to and from and you can walk back and forth through it. Place down the default ambience actor too for the sound to be played when u spawn into the level.### Custom Sounds! So there is a way to get custom sounds and music playing in game right now and will be standard with the next release version of the Covered Bones Template. For now I will link the assets you need to make this work. You still need the FMOD plugin for this. Thanks to RareKiwi#5360 and crazy4videogames#3909 for figuring out the last steps of this puzzle!#### Audio Files Setup: Make a new folder in your main (Content) folder and name it something like MySpicyAudio or something you can remember. Go to the Explorer window in Windows where you can see the files and browse to your covered bones project and go into the MySpicyAudio folder. Drag out your preferred sound (.wav, .mp3 or .ogg formats) and put it into the folder like shown below:The default wave sound file that will be included in the upcoming version of bare bones will be a 1 second long clip of a fire alarm, just to show it working:Unreal Editor will prompt you about importing the asset, so just click Import and it should appear in the Content menu. If you have set the sound up correctly you should see that the source file says FireAlarm.wav and that the path says /Game/MySpicyAudio and not the path to the location you imported it from or else it won’t play.Sound Blueprints Setup:Once you have obtained a file to play you will need to create a folder path (if it doesn’t already exist!) that will look like: Mods/Blueprints/Sound/Unused!Note that it should be in the Mods folder. Other locations might not work or cause the blueprints to misbehave…Game music needs to be fixed before I upload the ModMusic_BP, but you can download the ModSound_BP and the FireAlarm.wav here (extract in Content folder): ZIP file archiveUsing The Blueprint:Drag the blueprint out in the world where you want it to play from - a fire alarm usually plays best from above head height.In the details panel on the side you can edit some of the parameters; if it should loop, if it’s 3D (not playing everywhere) and more settings related to the max audible distance. Amongst these settings you need to set the Sound To Use as a Sound Name - The way to set up the sound name is to reference its location, name and file extension. So for the included fire alarm file you should change the name to MySpicyAudio/FireAlarm.wav - any other file you add to your custom audio folder would need to be set up the same way.If it works in the editor it will most likely work in game too. Re-cook the build and verify that the sound files and bp’s were copied over. Look in the discord and ask if you’re getting stuck :)" }, { "title": "UAsset Modding", "url": "/posts/uassetmodding/", "categories": "UAsset Modding", "tags": "uasset", "date": "2022-07-19 00:00:00 +0000", "snippet": "UAsset ModdingTo do UAsset modding, you’ll need to be able to extract the raw files from the game. Make sure to use this .bat file in your UE4 install directory to unpack the game files:@if \"%~1\"==\"\" goto skip@setlocal enableextensions@pushd %~dp0.\\UnrealPak.exe %1 -extract \"%~n1\"@popd@pause:skipNumerical/String EditsThese are by far the easiest edits to do. Open UAssetGUI and open the UAsset file you wish to edit. On the left side you’ll see a series of dropdowns. Within these, you’ll find various structs that you can edit. Find the struct that you would like to edit, and find the value within that you would like to change. Change the value. Save the file to anywhere. Two files will have been created, a .uasset and a .uexp, make sure to pak both of these files into your .pak mod in the correct location.Adding DataThis can be a very complicated portion of modding. Make sure to read all of this very carefully. This section will be specific in what to do and what to not do, but will not explain everything, as each file can be a little different. As long as you make sure the imports are correct and that you added the data correctly, the file should work. Open the UAsset file in UAssetGUI. Export the JSON file, and open that file in a text editor of your choice. I would suggest using Notepad++ and the JSON Parser plugin. This will let you auto-format the JSON file. When adding data, you’ll need to copy and paste whatever data you’re trying to add more of. If if this is a new item in ItemDataTable.uasset, then you’ll need to copy another item in the datatable. Copy and paste whatever you would like to duplicate into the correct location. Keep in mind all of the commas and brackets. If you see a negative number that doesn’t correlate to coordinates, or scale, or rotation, this is an import reference. If you open Import Data located in the left pane of UAssetGUI, you’ll see a bunch of negative numbers in the first column and other data stored in rows. This is the \t portion of the file that contains all the references and imports the file uses. Also within this file, you’ll see a column label called OuterIndex. This column will also contain a bunch of negative nunber and 0s. The 0s indicate that the row is not a child of another row. If this row contains a negative number within that column, then that row depends on another dependency. You can find this dependency as you would any other import, locatin the row with said negative number. When adding a reference from the game, it’s a good idea to copy and paste similar references and then change the strings slightly. This ensures that you will retain the correct formatting. You can add this reference either in the JSON file or in UAssetGUI. Both are better in different scenarios. If you’re going to add a bunch of imports, use the JSON file, otherwise use UAssetGUI. Save the JSON file with all your edits and open that JSON file in UAssetGUI. If you get an error, you messed up the JSON formatting. If you have made all your data additions and made sure to have the proper imports (you may need to import multiple times for just one thing), then the mod should work. You can tell if it’s working if the game does’t freeze or crash on launch (wait until the intro screen ends). If this occurs there is a high chance you messed up something with the imports." }, { "title": "UAsset Automation", "url": "/posts/uassetautomation/", "categories": "UAsset Modding", "tags": "uasset, python, automation", "date": "2022-07-19 00:00:00 +0000", "snippet": "UAsset AutomationJSON Parsing via PythonOnce you have a firm understanding of manually editing UAssets, you can semi-easily automate tasks. To start, you’ll need some Python, or other programming knowledge. I’ll be using Python for this tutorial because of the simple to use json library that comes with Python 3+. I highly recommend doing this if you need to change a lot of data every time the game updates. If you would like specific help with this, ask QuantumNuke75#3593 on Discord. Note that the code down below may not be pretty, as it’s gone under numerous changes as the game updates.Ammo ModYour first line should be the import statement.import jsonNext, you’ll want to open the file. To do this, replace FILE_NAME with the location of your JSON file that you extracted with UAssetGUI.file = open('FILE_NAME')At the bottom of the file, you’ll want to export your JSON file, which you can then load back up in UAssetGUI and save it as a .uasset.json.dump(data, open(\"export.json\", \"w\"))But, you’ll then want to load this file as a JSON file. data will become a Python dictionary.data = json.load(file)Within this data variable will be layers of dictionaries, lists, and key-value pairs witin the dictionaries. From this, you’ll be able to easily automate adding, data, changing values, or anything. Now we’ll need to loop through every item in the export datatable, which is where the majority of the data we need is held.for item in data[\"Exports\"][0][\"Table\"][\"Data\"]:Now we need to loop through every value for every item, since the ammo count for a gun is just one of many values an item has.\tfor item_data in item[\"Value\"]:Now, we check for specific tags, in our case, these tags are MagazineCountDefault(0) and MagazineCountMax(0). Once we’ve found these tags, we can set the values of these to whatever we want. In this specific case, the code is getting the value, and adding a number of mags to it.\t\tif item_data[\"Name\"] == \"MagazineCountDefault(0)\": amount = int(item_data[\"Value\"]) if 3 &lt; amount &lt; 30: item_data[\"Value\"] = num_mags continue if item_data[\"Name\"] == \"MagazineCountMax(0)\": amount = int(item_data[\"Value\"]) if 3 &lt; amount &lt; 30: item_data[\"Value\"] = num_mags continueThe full code is below:import jsonnum_mags = 15file = open('ItemDataTable.json')data = json.load(file)# For every item in the export table.for item in data[\"Exports\"][0][\"Table\"][\"Data\"]: # For every piece of the item data. for item_data in item[\"Value\"]: # If the item's name is MagazineCount if item_data[\"Name\"] == \"MagazineCountDefault(0)\": amount = int(item_data[\"Value\"]) if 3 &lt; amount &lt; 30: item_data[\"Value\"] = num_mags continue if item_data[\"Name\"] == \"MagazineCountMax(0)\": amount = int(item_data[\"Value\"]) if 3 &lt; amount &lt; 30: item_data[\"Value\"] = num_mags continuejson.dump(data, open(f\"ammo_export_{num_mags}.json\", \"w\")) More Ammo is an outdated mod, and this code will no longer effect anything in the game.Everything UnlockedI’ll be skipping basic portions of parsing, and will explain more complicated changes instead. Adding data with this method is significantly harder than just changing values. There are two different files we need to edit for Everything Unlocked, ItemDataTable.uasset and ItemData.uasset.ItemDataIn order to add entries to the ItemData we’ll need know what data to add. Every weapon has the following distinct attributes: name, gun blueprint location, default class name, class name, and the item type. In order to make this easier, a struct class was created.class ItemDataStruct: def __init__(self, name, location, default, clas, type): self.name = name self.location = location self.default = default self.clas = clas self.type = typeThis class holds all the information needed to add a specific gun. Now, we need to add a bunch of values. Since we are adding both primary weapons, secondary weapons, tacticals, and helmets accessory options, it’s important to distinguish them all. We’ll store each category of items in their separate arrays.primary_weapons = []primary_weapons.append(ItemDataStruct(\"P90\", \"/Game/Blueprints/Items/WeaponsRevised/Primary_P90(0)\", \"Default__Primary_P90_C(0)\", \"Primary_P90_C(0)\", \"SMG\"))primary_weapons.append(ItemDataStruct(\"Primary_M16A4\", \"/Game/Blueprints/Items/WeaponsRevised/Primary_M16A4(0)\", \"Default__Primary_M16A4_C(0)\", \"Primary_M16A4_C(0)\", \"AR\"))primary_weapons.append(ItemDataStruct(\"Primary_Saiga12\", \"/Game/Blueprints/Items/WeaponsRevised/Primary_Saiga12(0)\", \"Default__Primary_Saiga12_C(0)\", \"Primary_Saiga12_C(0)\", \"Shotgun\"))secondary_weapons = []secondary_weapons.append(ItemDataStruct(\"P250\", \"/Game/Blueprints/Items/WeaponsRevised/Secondary_P250(0)\", \"Default__Secondary_P250_C(0)\", \"Secondary_P250_C(0)\", \"Pistol\"))tacticals = []tacticals.append(ItemDataStruct(\"9Banger\", \"/Game/Blueprints/Items/WeaponsRevised/Grenade_9Banger_V2(0)\", \"Default__Grenade_9Banger_V2_C(0)\", \"Grenade_9Banger_V2_C(0)\", \"Grenade\"))helmets = []helmets.append(ItemDataStruct(\"Helmet_UpArmor\", \"/Game/Blueprints/Items/ArmorRevised/Helmet_UpArmor(0)\", \"Default__Helmet_UpArmor_C(0)\", \"Helmet_UpArmor_C(0)\", \"Helmet\"))Now we can begin parsing through the data. Similarly to More Ammo, we’ll be accessing the data in the same way but instead we’ll checking if the item is a PrimaryWeapons(0), SecondaryWeapon(0), TacticalItems(0), or HeadSelection(0).if items[\"Name\"] == \"PrimaryWeapons(0)\":elif items[\"Name\"] == \"SecondaryWeapons(0)\":elif items[\"Name\"] == \"TacticalItems(0)\":elif items[\"Name\"] == \"HeadSelection(0)\":I’ll only be covering how to automate the primary weapons to prevent this guide from getting longer. Each category is very similar, with some slight changes. Once we’ve establish that we’re in the PrimaryWeapons(0) category, we can begin making changes. Now we can parse through all the weapon structs we created for primary weapons.for weapon_struct in primary_weapons:The second thing we’ll need to to is add the imports. Without imports, the game will have no idea what you’ve added to the table. However, we need to get the current import number.last_import_index = len(data[\"Imports\"])Once we’ve done that, we can add all the imports we need.dic_1 = {'$type': 'UAssetAPI.Import, UAssetAPI', 'ClassPackage': '/Script/CoreUObject(0)', 'ClassName': 'Package(0)', 'ObjectName': weapon_struct.location, 'OuterIndex': 0}last_import_index += 1dic_2 = {'$type': 'UAssetAPI.Import, UAssetAPI', 'ClassPackage': '/Script/Engine(0)', 'ClassName': 'BlueprintGeneratedClass(0)', 'ObjectName': weapon_struct.clas, 'OuterIndex': -last_import_index}last_import_index += 1dic_3 = {'$type': 'UAssetAPI.Import, UAssetAPI', 'ClassPackage': weapon_struct.location, 'ClassName': weapon_struct.clas, 'ObjectName': weapon_struct.default, 'OuterIndex': -(last_import_index-1)}last_import_index += 1data[\"Imports\"].append(dic_1)data[\"Imports\"].append(dic_2)data[\"Imports\"].append(dic_3)Now we can add the actual weapons to ItemData. We first need to distinguish between what type of weapon we have, this changes what Type, CultureInvariantString, and ItemClass we need. We’ll also be copying a related gun entry so we don’t have to create everything from scratch.last_copy = Nonetype = NoneCultureInvariantString = Noneitem_class = Noneif weapon_struct.type == \"SMG\":\ttype = \"EWeaponType::WT_SubmachineGun(0)\"\tCultureInvariantString = \"SMG\"\titem_class = \"EItemClass::IC_SMG(0)\"\tlast_copy = copy.deepcopy(items[\"Value\"][0])elif weapon_struct.type == \"AR\":\ttype = \"EWeaponType::WT_Rifles(0)\"\tCultureInvariantString = \"Rifle\"\titem_class = \"EItemClass::IC_AssaultRifle(0)\"\tlast_copy = copy.deepcopy(items[\"Value\"][12])elif weapon_struct.type == \"Shotgun\":\ttype = \"EWeaponType::WT_Shotgun(0)\"\tCultureInvariantString = \"Shotgun\"\titem_class = \"EItemClass::IC_Shotgun(0)\"\tlast_copy = copy.deepcopy(items[\"Value\"][7])Now, we set the related data in the copy.# Set gun typelast_copy[\"Value\"][0][\"Value\"][0][\"Value\"] = type# Set Categorylast_copy[\"Value\"][4][\"Value\"] = item_class#Set namelast_copy[\"Value\"][1]['Value'] = weapon_struct.name# Set culture invariant stringlast_copy[\"Value\"][3][\"CultureInvariantString\"] = CultureInvariantStringThen, we set the import reference to the imports we just created, and append the new weapon to the table.# Set import reflast_copy[\"Value\"][5][\"Value\"] = -(last_import_index-1)# Append item to tableitems[\"Value\"].append(last_copy)The final code:import copy, jsonfrom ItemDataStruct import ItemDataStructf = open('json/ItemData.json')data = json.load(f)primary_weapons = []primary_weapons.append(ItemDataStruct(\"P90\", \"/Game/Blueprints/Items/WeaponsRevised/Primary_P90(0)\", \"Default__Primary_P90_C(0)\", \"Primary_P90_C(0)\", \"SMG\"))primary_weapons.append(ItemDataStruct(\"Primary_M16A4\", \"/Game/Blueprints/Items/WeaponsRevised/Primary_M16A4(0)\", \"Default__Primary_M16A4_C(0)\", \"Primary_M16A4_C(0)\", \"AR\"))primary_weapons.append(ItemDataStruct(\"Primary_Saiga12\", \"/Game/Blueprints/Items/WeaponsRevised/Primary_Saiga12(0)\", \"Default__Primary_Saiga12_C(0)\", \"Primary_Saiga12_C(0)\", \"Shotgun\"))secondary_weapons = []secondary_weapons.append(ItemDataStruct(\"P250\", \"/Game/Blueprints/Items/WeaponsRevised/Secondary_P250(0)\", \"Default__Secondary_P250_C(0)\", \"Secondary_P250_C(0)\", \"Pistol\"))tacticals = []tacticals.append(ItemDataStruct(\"9Banger\", \"/Game/Blueprints/Items/WeaponsRevised/Grenade_9Banger_V2(0)\", \"Default__Grenade_9Banger_V2_C(0)\", \"Grenade_9Banger_V2_C(0)\", \"Grenade\"))helmets = []helmets.append(ItemDataStruct(\"Helmet_UpArmor\", \"/Game/Blueprints/Items/ArmorRevised/Helmet_UpArmor(0)\", \"Default__Helmet_UpArmor_C(0)\", \"Helmet_UpArmor_C(0)\", \"Helmet\"))last_import_index = len(data[\"Imports\"])# For every item in the table.for items in data[\"Exports\"][0][\"Data\"]: if items[\"Name\"] == \"PrimaryWeapons(0)\": for weapon_struct in primary_weapons: # START IMPORTS dic_1 = {'$type': 'UAssetAPI.Import, UAssetAPI', 'ClassPackage': '/Script/CoreUObject(0)', 'ClassName': 'Package(0)', 'ObjectName': weapon_struct.location, 'OuterIndex': 0} last_import_index += 1 dic_2 = {'$type': 'UAssetAPI.Import, UAssetAPI', 'ClassPackage': '/Script/Engine(0)', 'ClassName': 'BlueprintGeneratedClass(0)', 'ObjectName': weapon_struct.clas, 'OuterIndex': -last_import_index} last_import_index += 1 dic_3 = {'$type': 'UAssetAPI.Import, UAssetAPI', 'ClassPackage': weapon_struct.location, 'ClassName': weapon_struct.clas, 'ObjectName': weapon_struct.default, 'OuterIndex': -(last_import_index-1)} last_import_index += 1 data[\"Imports\"].append(dic_1) data[\"Imports\"].append(dic_2) data[\"Imports\"].append(dic_3) # END IMPORTS last_copy = None type = None CultureInvariantString = None item_class = None if weapon_struct.type == \"SMG\": type = \"EWeaponType::WT_SubmachineGun(0)\" CultureInvariantString = \"SMG\" item_class = \"EItemClass::IC_SMG(0)\" last_copy = copy.deepcopy(items[\"Value\"][0]) elif weapon_struct.type == \"AR\": type = \"EWeaponType::WT_Rifles(0)\" CultureInvariantString = \"Rifle\" item_class = \"EItemClass::IC_AssaultRifle(0)\" last_copy = copy.deepcopy(items[\"Value\"][12]) elif weapon_struct.type == \"Shotgun\": type = \"EWeaponType::WT_Shotgun(0)\" CultureInvariantString = \"Shotgun\" item_class = \"EItemClass::IC_Shotgun(0)\" last_copy = copy.deepcopy(items[\"Value\"][7]) # Set gun type last_copy[\"Value\"][0][\"Value\"][0][\"Value\"] = type # Set Category last_copy[\"Value\"][4][\"Value\"] = item_class #Set name last_copy[\"Value\"][1]['Value'] = weapon_struct.name # Set culture invariant string last_copy[\"Value\"][3][\"CultureInvariantString\"] = CultureInvariantString # Set import ref last_copy[\"Value\"][5][\"Value\"] = -(last_import_index-1) items[\"Value\"].append(last_copy) elif items[\"Name\"] == \"SecondaryWeapons(0)\": for weapon_struct in secondary_weapons: # START IMPORTS dic_1 = {'$type': 'UAssetAPI.Import, UAssetAPI', 'ClassPackage': '/Script/CoreUObject(0)', 'ClassName': 'Package(0)', 'ObjectName': weapon_struct.location, 'OuterIndex': 0} last_import_index += 1 dic_2 = {'$type': 'UAssetAPI.Import, UAssetAPI', 'ClassPackage': '/Script/Engine(0)', 'ClassName': 'BlueprintGeneratedClass(0)', 'ObjectName': weapon_struct.clas, 'OuterIndex': -last_import_index} last_import_index += 1 dic_3 = {'$type': 'UAssetAPI.Import, UAssetAPI', 'ClassPackage': weapon_struct.location, 'ClassName': weapon_struct.clas, 'ObjectName': weapon_struct.default, 'OuterIndex': -(last_import_index - 1)} last_import_index += 1 data[\"Imports\"].append(dic_1) data[\"Imports\"].append(dic_2) data[\"Imports\"].append(dic_3) # END IMPORTS last_copy = copy.deepcopy(items[\"Value\"][0]) type = None CultureInvariantString = None item_class = None if weapon_struct.type == \"Pistol\": type = \"EWeaponType::WT_PistolsLethal(0)\" CultureInvariantString = \"Semi-Automatic\" item_class = \"EItemClass::IC_Pistol(0)\" # Set Weapon Type last_copy[\"Value\"][0][\"Value\"][0][\"Value\"] = type # Set ItemClass last_copy[\"Value\"][4][\"Value\"] = item_class # Set name last_copy[\"Value\"][1]['Value'] = weapon_struct.name # Set culture invariant string last_copy[\"Value\"][3][\"CultureInvariantString\"] = CultureInvariantString # Set import ref last_copy[\"Value\"][5][\"Value\"] = -(last_import_index - 1) items[\"Value\"].append(last_copy) elif items[\"Name\"] == \"TacticalItems(0)\": for item_struct in tacticals: # START IMPORTS dic_1 = {'$type': 'UAssetAPI.Import, UAssetAPI', 'ClassPackage': '/Script/CoreUObject(0)', 'ClassName': 'Package(0)', 'ObjectName': item_struct.location, 'OuterIndex': 0} last_import_index += 1 dic_2 = {'$type': 'UAssetAPI.Import, UAssetAPI', 'ClassPackage': '/Script/Engine(0)', 'ClassName': 'BlueprintGeneratedClass(0)', 'ObjectName': item_struct.clas, 'OuterIndex': -last_import_index} last_import_index += 1 dic_3 = {'$type': 'UAssetAPI.Import, UAssetAPI', 'ClassPackage': item_struct.location, 'ClassName': item_struct.clas, 'ObjectName': item_struct.default, 'OuterIndex': -(last_import_index - 1)} last_import_index += 1 data[\"Imports\"].append(dic_1) data[\"Imports\"].append(dic_2) data[\"Imports\"].append(dic_3) # END IMPORTS last_copy = copy.deepcopy(items[\"Value\"][0]) item_class = \"EItemClass::IC_Grenade(0)\" # Set Name last_copy[\"Value\"][0][\"Value\"] = item_struct.name #Set ItemClass last_copy[\"Value\"][10][\"Value\"] = item_class # Set import ref last_copy[\"Value\"][13][\"Value\"] = -(last_import_index - 1) print(len(last_copy[\"Value\"])) items[\"Value\"].append(last_copy) elif items[\"Name\"] == \"HeadSelection(0)\": for item_struct in helmets: # START IMPORTS dic_1 = {'$type': 'UAssetAPI.Import, UAssetAPI', 'ClassPackage': '/Script/CoreUObject(0)', 'ClassName': 'Package(0)', 'ObjectName': item_struct.location, 'OuterIndex': 0} last_import_index += 1 dic_2 = {'$type': 'UAssetAPI.Import, UAssetAPI', 'ClassPackage': '/Script/Engine(0)', 'ClassName': 'BlueprintGeneratedClass(0)', 'ObjectName': item_struct.clas, 'OuterIndex': -last_import_index} last_import_index += 1 dic_3 = {'$type': 'UAssetAPI.Import, UAssetAPI', 'ClassPackage': item_struct.location, 'ClassName': item_struct.clas, 'ObjectName': item_struct.default, 'OuterIndex': -(last_import_index - 1)} last_import_index += 1 data[\"Imports\"].append(dic_1) data[\"Imports\"].append(dic_2) data[\"Imports\"].append(dic_3) # END IMPORTS item_class = \"EItemClass::IC_Headgear(0)\" last_copy = copy.deepcopy(items[\"Value\"][0]) # Set Name last_copy[\"Value\"][0][\"Value\"] = item_struct.name # Set Item Class last_copy[\"Value\"][3][\"Value\"] = item_class # Set import ref last_copy[\"Value\"][4][\"Value\"] = -(last_import_index - 1) items[\"Value\"].append(last_copy)json.dump(data, open(f\"output/everything_unlocked_itemdata.json\", \"w\"))ItemDataTableThis is an easier table to edit, but required more data. To start, you’ll need a dictionary of attachments mapped to their respective socket for each category of attachment: sight, muzzle, underbarrel. You’ll also need a dictionary of item names, mapped to a list of sockets they have.Here’s an example of the underbarrel attachment list, which we’ll be using as an example:all_under = {-38:\"combat_grip\",-39:\"combat_grip\",-65:\"mp5_foregrip\",-66:\"mp5_foregrip\",-70:\"mp5_foregrip\",-81:\"light_socket\",-82:\"laser_socket\",-83:\"laser_socket\",-86:\"foregrip_socket\",-87:\"afg_mlok_grip\",-90:\"foregrip_socket\",-91:\"pointer_socket\",-92:\"pointer_socket\",-102:\"foregrip_VFG_socket\",-103:\"foregrip_socket\",-104:\"vfg_mlok_grip\",-136:\"foregrip_socket\"}And here’s an example of the weapon names mapped to attachments (Note: This list may be outdated.):weapon_to_attachments = {'M1911A1':{'RMRPistol_Socket', 'comp_socket', 'supressor_socket', 'light_socket', 'laser_socket', 'SROPistol_Socket', 'flash_socket', 'Reflex_Socket'},'G19':{'RMRPistol_Socket', 'comp_socket', 'supressor_socket', 'light_socket', 'laser_socket', 'SROPistol_Socket', 'flash_socket', 'Reflex_Socket'}}Now we parse through the ItemDataTable and look for the corresponding attachment AvailableUnderbarrelAttachments(0). Once we do, we check the weapon_to_attachments dictionary, and add all the attachments to the weapon.for item in data[\"Exports\"][0][\"Table\"][\"Data\"]: for item_data in item[\"Value\"]:\t if item_data[\"Name\"] == \"AvailableUnderbarrelAttachments(0)\": name = item[\"Value\"][0][\"CultureInvariantString\"] try: comp_attachments = weapon_to_attachments[name] except: continue attachments_to_add = [] for under in all_under: if all_under[under] in comp_attachments: attachments_to_add.append(under) for attachment in attachments_to_add: copied = copy.deepcopy(attachment_dic_format) copied[\"Value\"] = attachment if copied not in item_data[\"Value\"]: item_data[\"Value\"].append(copied) continueFull code below. As a bonus, weapon inertia was also changed for items, making unlocked weapons more usable.import copy, jsonfile = open('json/ItemDataTable.json')data = json.load(file)all_scopes = {-42:\"SRO_FBI_Socket\",-43:\"RMR_FBI_Socket\",-44:\"RMRPistol_Socket\",-45:\"RMR_Socket\",-46:\"RMRPistol_Socket\",-47:\"SRO_Socket\",-48:\"SROPistol_Socket\",-49:\"SROPistol_Socket\",-50:\"SRORaised_socket\",-51:\"Delta_Socket\",-52:\"ACOG_Socket\",-53:\"atac_Socket\",-54:\"HAMR_Socket\",-55:\"Harris_Socket\",-56:\"M5B_Socket\",-57:\"sdr_Socket\",-105:\"Scope_Socket\",-106:\"Reflex_Socket\",-107:\"EXPS3_socket\",-108:\"Holosight_XPS3\",-109:\"Rail_Socket\",-110:\"Rail_Socket\",-111:\"Rail_Socket\",-112:\"Reflex_Socket\",-113:\"Reflex_Socket\",-114:\"Reflex_Socket\",-115:\"Reflex_Socket\",-116:\"Reflex_Socket\",-117:\"Reflex_Socket\",-118:\"Reflex_Socket\",-119:\"MicroT2_Socket\",-120:\"MicroT2_FBI_Socket\",-121:\"MicroT2Raised_Socket\",-122:\"EXPS3_MP5_optic\",-123:\"SRO_MP5_optic\",-124:\"mp5_optic\",-125:\"MicroT2_mp5_optic\",-126:\"Reflex_Socket\",-127:\"Reflex_Socket\",-128:\"Reflex_Socket\",-129:\"SRSRaised_socket\"}all_muzzles = {-28:\"muzzle_socket\",-29:\"asr_socket\",-30:\"asr_socket\",-31:\"sfmb_socket\",-32:\"sfmb_socket\",-33:\"shotgunbrake_socket\",-40:\"brake_socket\",-60:\"socom338_socket\",-61:\"tag_mp9suppressor\",-62:\"PBS_socket\",-63:\"socom338_socket\",-64:\"socom338_socket\",-78:\"comp_socket\",-79:\"comp_socket\",-80:\"flash_socket\",-84:\"supressor_socket\",-85:\"supressor_socket\",-88:\"compensator_socket\",-97:\"Barrel_Socket\",-100:\"Barrel_Socket\",-101:\"supressor_socket\",-130:\"Choke_Socket\",-131:\"tube_socket\",-135:\"supressor_socket\"}all_under = {-38:\"combat_grip\",-39:\"combat_grip\",-65:\"mp5_foregrip\",-66:\"mp5_foregrip\",-70:\"mp5_foregrip\",-81:\"light_socket\",-82:\"laser_socket\",-83:\"laser_socket\",-86:\"foregrip_socket\",-87:\"afg_mlok_grip\",-90:\"foregrip_socket\",-91:\"pointer_socket\",-92:\"pointer_socket\",-102:\"foregrip_VFG_socket\",-103:\"foregrip_socket\",-104:\"vfg_mlok_grip\",-136:\"foregrip_socket\"}weapon_to_attachments = {'M1911A1':{'RMRPistol_Socket', 'comp_socket', 'supressor_socket', 'light_socket', 'laser_socket', 'SROPistol_Socket', 'flash_socket', 'Reflex_Socket'},'G19':{'RMRPistol_Socket', 'comp_socket', 'supressor_socket', 'light_socket', 'laser_socket', 'SROPistol_Socket', 'flash_socket', 'Reflex_Socket'},'G18 Auto':{'light_socket', 'laser_socket', 'comp_socket', 'RMRPistol_Socket', 'supressor_socket', 'flash_socket', 'Reflex_Socket', 'SROPistol_Socket'},'SKL_Pistol_M92FS':{'light_socket', 'brake_socket', 'comp_socket', 'supressor_socket'},'P250':{'comp_socket', 'supressor_socket', 'light_socket', 'laser_socket', 'brake_socket'},'P99':{'comp_socket', 'Delta_Socket', 'supressor_socket', 'laser_socket', 'light_socket', 'flash_socket', 'Reflex_Socket', 'Harris_Socket'},'.357 Magnum':{'muzzle_socket', 'pointer_socket', 'Reflex_Socket', 'supressor_socket'},'Taser':{'laser_socket'},'USP45':{'RMRPistol_Socket', 'comp_socket', 'supressor_socket', 'light_socket', 'laser_socket', 'SROPistol_Socket', 'brake_socket'},'P92X':{'RMRPistol_Socket', 'supressor_socket', 'light_socket', 'laser_socket', 'SROPistol_Socket', 'brake_socket'},'G36C':{'asr_socket', 'RMR_Socket', 'pointer_socket', 'HAMR_Socket', 'laser_socket', 'light_socket', 'combat_grip', 'socom338_socket', 'M5B_Socket', 'sfmb_socket', 'foregrip_socket', 'EXPS3_socket', 'SRO_Socket', 'Reflex_Socket'},'M14':{'Rail_Socket', 'foregrip_socket', 'laser_socket', 'supressor_socket'},'M24':{'ACOG_Socket', 'Scope_Socket', 'Reflex_Socket', 'supressor_socket'},'M4A1':{'asr_socket', 'pointer_socket', 'HAMR_Socket', 'ACOG_Socket', 'supressor_socket', 'MicroT2Raised_Socket', 'laser_socket', 'light_socket', 'combat_grip', 'compensator_socket', 'M5B_Socket', 'sfmb_socket', 'socom338_socket', 'foregrip_socket', 'Reflex_Socket'},'AK102':{'pointer_socket', 'HAMR_Socket', 'ACOG_Socket', 'supressor_socket', 'laser_socket', 'light_socket', 'foregrip_socket', 'Reflex_Socket', 'Harris_Socket'},'MK1 Carbine':{'asr_socket', 'pointer_socket', 'SRSRaised_socket', 'laser_socket', 'socom338_socket', 'combat_grip', 'sfmb_socket', 'foregrip_socket'},'ARN-18':{'asr_socket', 'laser_socket', 'socom338_socket', 'combat_grip', 'sfmb_socket', 'EXPS3_socket', 'vfg_mlok_grip', 'Reflex_Socket', 'afg_mlok_grip'},'SA-58':{'asr_socket', 'sdr_Socket', 'pointer_socket', 'MicroT2Raised_Socket', 'laser_socket', 'light_socket', 'combat_grip', 'socom338_socket', 'M5B_Socket', 'sfmb_socket', 'foregrip_socket', 'EXPS3_socket', 'SRO_Socket', 'atac_Socket', 'Reflex_Socket'},'GA416':{'asr_socket', 'sdr_Socket', 'pointer_socket', 'ACOG_Socket', 'SRSRaised_socket', 'laser_socket', 'socom338_socket', 'combat_grip', 'M5B_Socket', 'sfmb_socket', 'EXPS3_socket', 'vfg_mlok_grip', 'atac_Socket', 'Reflex_Socket', 'afg_mlok_grip'},'M16A4':{'HAMR_Socket', 'ACOG_Socket', 'Scope_Socket', 'supressor_socket', 'Reflex_Socket'},'SCAR-H':{'asr_socket', 'pointer_socket', 'SRSRaised_socket', 'socom338_socket', 'combat_grip', 'sfmb_socket', 'foregrip_socket', 'atac_Socket'},'SLR47':{'pointer_socket', 'laser_socket', 'combat_grip', 'PBS_socket', 'afg_mlok_grip'},'SR-16':{'asr_socket', 'Harris_Socket', 'pointer_socket', 'HAMR_Socket', 'ACOG_Socket', 'supressor_socket', 'SRSRaised_socket', 'laser_socket', 'light_socket', 'combat_grip', 'socom338_socket', 'M5B_Socket', 'sfmb_socket', 'foregrip_socket', 'EXPS3_socket', 'vfg_mlok_grip', 'Reflex_Socket', 'afg_mlok_grip'},'Pepperball Gun':{'pointer_socket', 'combat_grip', 'M5B_Socket', 'foregrip_socket', 'Reflex_Socket'},'B1301':{'Choke_Socket', 'MicroT2_Socket', 'RMR_Socket', 'pointer_socket', 'shotgunbrake_socket', 'SRO_FBI_Socket', 'RMR_FBI_Socket', 'MicroT2_FBI_Socket', 'brake_socket', 'SRO_Socket'},'B1301 \"Entryman\"':{'Choke_Socket', 'MicroT2_Socket', 'RMR_Socket', 'pointer_socket', 'shotgunbrake_socket', 'SRO_FBI_Socket', 'RMR_FBI_Socket', 'MicroT2_FBI_Socket', 'brake_socket', 'SRO_Socket'},'M4 Super 90':{'Choke_Socket', 'Barrel_Socket', 'supressor_socket', 'light_socket', 'foregrip_socket', 'Reflex_Socket'},'M590-A':{'tube_socket', 'supressor_socket', 'light_socket', 'foregrip_socket', 'Reflex_Socket'},'Saiga 12':{'pointer_socket', 'Reflex_Socket'},'870 CQB':{'RMR_Socket', 'supressor_socket', 'light_socket', 'shotgunbrake_socket', 'brake_socket', 'SRO_Socket', 'Reflex_Socket'},'MP5/10MM':{'MicroT2_Socket', 'RMR_Socket', 'pointer_socket', 'laser_socket', 'foregrip_VFG_socket', 'combat_grip', 'socom338_socket', 'foregrip_socket', 'SRO_Socket'},'MP5A3':{'MicroT2_Socket', 'RMR_Socket', 'pointer_socket', 'laser_socket', 'foregrip_VFG_socket', 'combat_grip', 'socom338_socket', 'foregrip_socket', 'EXPS3_socket', 'SRO_Socket'},'MP9':{'MicroT2_Socket', 'RMR_Socket', 'pointer_socket', 'tag_mp9suppressor', 'laser_socket', 'SRO_Socket'},'MPX':{'pointer_socket', 'supressor_socket', 'light_socket', 'socom338_socket', 'combat_grip', 'SRORaised_socket', 'vfg_mlok_grip', 'Reflex_Socket', 'afg_mlok_grip'},'P90':{'RMR_Socket', 'pointer_socket', 'socom338_socket', 'light_socket', 'Reflex_Socket'},'57 USG':{'RMRPistol_Socket', 'supressor_socket', 'light_socket', 'laser_socket', 'socom338_socket', 'SROPistol_Socket'},'MK16':{'asr_socket', 'Barrel_Socket', 'pointer_socket', 'HAMR_Socket', 'supressor_socket', 'MicroT2Raised_Socket', 'laser_socket', 'light_socket', 'socom338_socket', 'compensator_socket', 'sfmb_socket', 'foregrip_socket', 'Reflex_Socket', 'Harris_Socket'},'ARWC':{'asr_socket', 'sdr_Socket', 'pointer_socket', 'HAMR_Socket', 'SRSRaised_socket', 'laser_socket', 'light_socket', 'combat_grip', 'socom338_socket', 'sfmb_socket', 'EXPS3_socket', 'vfg_mlok_grip', 'atac_Socket', 'Reflex_Socket', 'afg_mlok_grip'},'UMP-45':{'comp_socket', 'pointer_socket', 'supressor_socket', 'MicroT2Raised_Socket', 'SRSRaised_socket', 'laser_socket', 'light_socket', 'combat_grip', 'SRORaised_socket', 'foregrip_socket', 'EXPS3_socket', 'Reflex_Socket'},'PFC9':{'SROPistol_Socket', 'laser_socket', 'comp_socket', 'light_socket', 'RMRPistol_Socket', 'supressor_socket'}}attachment_dic_format = {'$type': 'UAssetAPI.PropertyTypes.ObjectPropertyData, UAssetAPI', 'Name': '3', 'DuplicationIndex': 0, 'Value': -95}# For every item in the table.for item in data[\"Exports\"][0][\"Table\"][\"Data\"]: # For every piece of the item data. for item_data in item[\"Value\"]: # # Set inertia # if item_data[\"Name\"] == \"InertiaDragAimRotation(0)\": item_data[\"Value\"] = 0.8 continue elif item_data[\"Name\"] == \"InertiaDragAimLocation(0)\": item_data[\"Value\"] = 0.15 continue elif item_data[\"Name\"] == \"InertiaDragStrafeRotation(0)\": item_data[\"Value\"] = 0.4 continue elif item_data[\"Name\"] == \"InertiaDragStrafeLocation(0)\": item_data[\"Value\"] = 0.2 continue # Attachments elif item_data[\"Name\"] == \"AvailableScopeAttachments(0)\": name = item[\"Value\"][0][\"CultureInvariantString\"] try: comp_attachments = weapon_to_attachments[name] except: continue attachments_to_add = [] for scope in all_scopes: if all_scopes[scope] in comp_attachments: attachments_to_add.append(scope) for attachment in attachments_to_add: copied = copy.deepcopy(attachment_dic_format) copied[\"Value\"] = attachment if copied not in item_data[\"Value\"]: item_data[\"Value\"].append(copied) continue elif item_data[\"Name\"] == \"AvailableMuzzleAttachments(0)\": name = item[\"Value\"][0][\"CultureInvariantString\"] try: comp_attachments = weapon_to_attachments[name] except: continue attachments_to_add = [] for muzzle in all_muzzles: if all_muzzles[muzzle] in comp_attachments: attachments_to_add.append(muzzle) for attachment in attachments_to_add: copied = copy.deepcopy(attachment_dic_format) copied[\"Value\"] = attachment if copied not in item_data[\"Value\"]: item_data[\"Value\"].append(copied) continue elif item_data[\"Name\"] == \"AvailableUnderbarrelAttachments(0)\": name = item[\"Value\"][0][\"CultureInvariantString\"] try: comp_attachments = weapon_to_attachments[name] except: continue attachments_to_add = [] for under in all_under: if all_under[under] in comp_attachments: attachments_to_add.append(under) for attachment in attachments_to_add: copied = copy.deepcopy(attachment_dic_format) copied[\"Value\"] = attachment if copied not in item_data[\"Value\"]: item_data[\"Value\"].append(copied) continuejson.dump(data, open(f\"output/everything_unlocked_itemdatatable.json\", \"w\"))" }, { "title": "Tools", "url": "/posts/tools/", "categories": "Misc", "tags": "umodel, fmodel, psk", "date": "2022-07-19 00:00:00 +0000", "snippet": "Modding ToolsUModelAllows for accessing UE4 game files.Link: https://www.gildor.org/en/projects/umodel#filesFModelAllows for basic reverse engineering of the game.Link: https://fmodel.appAddition Information: If crashing occures, navigate to %appdata%/Roaming and delete the FModel folder. Then, copy the primary game .pak into a different folder. Relaunch FModel and point it towards the copied .pak file.Universal Unreal UnlockerUnlocks the console in UE4 games.Link: https://framedsc.com/GeneralGuides/universal_ue4_consoleunlocker.htmBlender PSK PluginGives option to import .psk, psa, pskx files into Blender.Link: https://github.com/Befzz/blender3d_import_psk_psaQuantumPAKAllows for easy PAKing and UNPAKing of files without needing to install UE4 or creating batch files.Link: QuantumPAKSetup: Extract the zip. Download UnrealPakTool from here. Extract the contents of UnrealPakTool, and move all of the contents within the UnrealPakTool folder to ...\\UnrealPaker\\Engine\\Binaries\\Win64. Run QuantumPAK.exe.UAssetGUIAllows editing raw .uasset files. Use responsibly.Link: https://github.com/atenfyr/UAssetGUIQuickCook + QuickMapAutomates Cooking, Copying, Paking and opening the game to a specific level within a UE4 widget.Guide: Quick Cook Usage GuideLink: QuickCookV1.zipQuickMap: pakchunk99-QuickLoadV1.zip Nexus Mods mod.ioFMOD AudioFMOD Bank ToolsAllows unpacking and repacking of FMOD banks.Link: https://www.nexusmods.com/rugbyleaguelive3/mods/2?tab=docs Limited to single FSB banksFSB Files Extractor (fsbext)Allows raw unpacking and repacking of FMOD fsb files.Link: https://aluigi.altervista.org/papers.htm#fsbextBat scripts: fsbextbats.zip Includes makeFSB.bat and extractFSB.bat To use bat, place fsbext.zip contents with bat files in /fsbext for examplebmsbankQuickBMS script to export and inject multiple fsb files from FMOD banks.Link: bmsbank.zip Includes bank.bms, quickbms.exe, extractBank.bat, injectBank.batOriginal scriptQuickBMSAudacityFree multi track audi editing software.Latest: https://www.audacityteam.org/download/windows/2.4.2: https://archive.org/download/audacity-2.4.2/audacity-win-2.4.2.exe 2.4.2 has no telemetryOther Tools" }, { "title": "Texture Modding", "url": "/posts/texturemodding/", "categories": "Texture Modding", "tags": "texture", "date": "2022-07-19 00:00:00 +0000", "snippet": "Texture ModdingTexture ReplacementTexture replacement is the easiest to mod. An example can be found in Example Mod. If you are doing more than recoloring, you will also need to edit the normal and ORM maps. When ripping files from the game, look for files that contain T_, BaseColor, _B, as these files are usually the texture files. Modify the texture however you would like with GIMP, Photoshop, or any other image editing software. You can also use Substance Painter, and doing such will make texturing much easier. As with overriding any other object from the game, make sure to replicate the location of the texture. If you don’t, the changes won’t apply. Create a .pak file, and everything should work properly." }, { "title": "Sound Modding", "url": "/posts/soundmodding/", "categories": "Sound Modding", "tags": "sound, fmod", "date": "2022-07-19 00:00:00 +0000", "snippet": "Sound ModdingVoiceover ModdingVoice over modding is incredibly easy.Simply navigate to …/Ready Or Not/ReadyOrNot/Content/VO/… and replace any lines you wish to replace.FMOD Modding with FMOD Bank Tool FMOD Bank Tool will only work on the first FSB in a bank. See below for compatible single FSB banks; CmndMenu, Data Center, Dealer Level, Farm Level, Fast Food, Gas Level, Hotel Civ Lines, Importer Level, Killhouse Level, Lobby Level, MainMenu, Meth Apartments, Meth Level, Police Station Level, Port Level, PVP Lines, Ridgeline, RUS, School Level, SWAT Lines, Training Level Extract an FMOD Bank with FMOD Bank Tool from .../Ready Or Not/ReadyOrNot/Content/FMOD/Desktop/…. Edit or replace any sounds you wish. Make sure the file you are replacing with is the same format as the original file. Using FMOD Bank Tools, repack all the files and replace the FMOD Bank within the game files.FMOD Modding with Bank Injection and FSB tools Use this method for banks with multiple .fsb and .wav files. See below for notable multi-FSB banks; Agency, Club, Global Amb, Hospital, Hotel Level, Interactions, Master, Penthouse, Shield, SWAT, Tools, UI, Valley Level, WeaponsBank and FSB Extraction Setup a directory to extract and repack from with no file permission issues.I’m working from C:/Files/ronFMOD/Put your FMOD tool folders here (bmsbank and fsbext) for ease of use.Also create a /banks or individual project folder. /ronFMOD /banks /bmsbank /fsbext Copy .bank file/s from the game’s install location to your /banks folder .bank are located in .../Ready Or Not/ReadyOrNot/Content/FMOD/Desktop/ Open the /bmsbank tool folder in another window, then drag a bank from /banks onto /bmsbank/extractBank.bat Usually two .fsb files should now be in /banks/out/&lt;BANKNAME&gt;/00000000.fsb and 00000001.fsb for example Navigate to /banks/out/&lt;BANKNAME&gt;/Open the /fsbext folder in another window,Drag the .fsb containing desired audio onto /fsbext/extractFSB.bat For weapon SFX it is 00000001.fsbA .dat file will be created for rebuilding the fsb later.Extracted audio files should be in /banks/out/&lt;BANKNAME&gt;/&lt;FSBNAME&gt;/ and .wav, not .ogg file format. Windows will optimize the folder to music, reducing navigation speed and sorting. You can change the properties on this folder or all sub directories of /ronFMOD to General.Audio Editing Use a program such as Audacity to open, edit and export your .wav files Audio length needs to match the source Project Rate is usually 48000Hz Encoding needs to match the source which for RoN .wav, I think, is Signed 16-bit PCM. Check file sizes are identical to confirm. Video of mostly relevant Audacity editingFSB Rebuild and Bank Injection Navigate to /banks/out/&lt;BANKNAME&gt;/With the /fsbext folder open in another window, drag &lt;FSBNAME&gt;.dat onto /fsbext/makeFSB.bat For weapon SFX it is 00000001.dat Navigate to /banks/out/&lt;BANKNAME&gt;/new/Copy your new fsb to /banks/in/&lt;BANKNAME&gt;/ Confirm the size is identical to the original just outside of /new Navigate to /banks/With the /bmsbank folder open in another window, drag your .bank onto /fsbext/makeFSB.bat to inject your modified .fsb into the file. Backup the original .bank from .../Ready Or Not/ReadyOrNot/Content/FMOD/Desktop/ Change the file extension of your backup to something else like .bankoriginal for example to keep it in the same folder. Copy your injected .bank file from /banks to your games .../FMOD/Desktop/ folder.Confirm the filesize matches the original file." }, { "title": "Skeletal Mesh Modding", "url": "/posts/skeletalmeshmodding/", "categories": "Skeletal Mesh Modding", "tags": "skeletal mesh", "date": "2022-07-19 00:00:00 +0000", "snippet": "Skeletal Mesh ModdingSkeletal Mesh Replacement Extract the model as a .psk using UModel. Import file into Blender using the Blender PSK plugin. Change the units into Metric, Meters, with a scale of 0.01. Scale the model and skeleton by 100. Unparent the skeleton from the model. Import the model you want to replace the normal model with, and resize it to fit properly. Delete the old model. And apply all transforms with Ctrl + A. Parent the skeleton to the new model using Ctrl + P. I recommend not automatically weight painting, and doing everything manually. Also make sure the root bone is the correct one. For guns this should be J_Gun. For other skeletal meshes, this will be something different. You can view the root bone in UModel. If you have another bone as the root, rename it to Armature, this makes Blender ignore that bone. Paint the weights accordingly. For guns you’ll most likely want to paint each moving piece with a value of 1.0. Export the file as an .fbx without leaf bones. Import the file into UE4. In order to make material files work, they must be instances of preexisting materials in the game. Instance a material, edit as you would like. Hook up your texture assets. This will be talked about in Material Replacement. Cook the content, and put the texture, material, and mesh files in the correct places. Make sure to add a _P to the end of your .pak file name. This makes it a patch file." }, { "title": "Material Modding", "url": "/posts/materialmodding/", "categories": "Material Modding", "tags": "material", "date": "2022-07-19 00:00:00 +0000", "snippet": "Material ModdingMaterial Replacement Using FModel, locate the master material you wish to use. Ensure that the material name somewhat correlates to what you are modding. For example, an attachment should have the master material Weapon_1P_Toprain_MASTER. Alternatively, you can use UModel to export the material and look at the .txt file. In that file, while still using FModel, locate three parameters. These parameters will point to the Normal, Texture, and ORM maps. If you are using UModel instead, you can also view these parameters. In UE4, create a fake master material with the same name in the same location as where it is within the game. You will not be exporting this file unless you uncheck the Share Material Shader Code in Project Settings &gt; Packaging. In that master material, make sure to create three texture parameters named the same as the parameters you found using FModel or UModel. Make sure to hook up these nodes accordingly. Create a new material instance with the master material being the Parent, and pass in the relevant Normal, Texture, and ORM maps. Assign this material to the model you are overriding." }, { "title": "FAQ", "url": "/posts/faq/", "categories": "General Information", "tags": "faq", "date": "2022-07-19 00:00:00 +0000", "snippet": "FAQQ: How do I install/uninstall mods?Navigate to your Into The Radius install directory and go to …/IntoTheRadius/Content/Paks/… and drag in any .pak mods which you wish to install. If you want to uninstall, simply delete the mods from that directory.Q: Can I still play online with mods?Yes, although you’ll need to disable Server Side Checksum in settings in order to join or host modded lobbies.Q: Can other people see my mods?Most are not visible to other players unless they also have the mod installed.Q: Will I get banned for using mods?No, unless you cheat via other means. Mods are supported by the developers.Q: Where can I find mods?NexusMods is the recommended place to find mods. Any other website may not be safe and can harm the creators of the mod.Q: Should I start modding?Depends on your willingness to learn. Modding can be difficult to get into, but isn’t too hard either. The SDK is coming on or post game release, which will be when mods are officially supported. Along with the SDK will come ease of modding, which we do not currently have." }, { "title": "Batch Files", "url": "/posts/batchfiles/", "categories": "General Information", "tags": "batch", "date": "2022-07-19 00:00:00 +0000", "snippet": "Batch FilesExtract to Win64@if \"%~1\"==\"\" goto skip@setlocal enableextensions@pushd %~dp0.\\UnrealPak.exe %1 -extract \"%~n1\"@popd@pause:skipExtract to Custom Directory@if \"%~1\"==\"\" goto skip::REPLACE WITH YOUR DIRECTORY TO EXTRACT TO@set output_location=C:\\Program Files (x86)\\Steam\\steamapps\\common\\Ready Or Not\\ReadyOrNot\\Content\\Paks@setlocal enableextensions@pushd %~dp0@echo %output_location%/%~n1.\\UnrealPak.exe %1 -extract \"%output_location%\\%~n1\"@popd@pause:skipPak to Same Directory@if \"%~1\"==\"\" goto skip@setlocal enableextensions@pushd %~dp0@echo \"%~1\\*.*\" \"../../../ReadyOrNot/\" &gt;filelist.txt.\\UnrealPak.exe \"%~1.pak\" -create=filelist.txt -compress@popd@pause:skipPak to Custom Directory@if \"%~1\"==\"\" goto skip::REPLACE WITH YOUR DIRECTORY@set output_location=C:\\Program Files (x86)\\Steam\\steamapps\\common\\Ready Or Not\\ReadyOrNot\\Content\\Paks@setlocal enableextensions@pushd %~dp0@echo %output_location%%~n1.pak@echo \"%~1\\*.*\" \"../../../ReadyOrNot/\" &gt;filelist.txt.\\UnrealPak.exe \"%output_location%\\%~n1.pak\" -create=filelist.txt -compress@popd@pause:skip" }, { "title": "AI Modding", "url": "/posts/aimodding/", "categories": "AI Modding", "tags": "ai", "date": "2022-07-19 00:00:00 +0000", "snippet": "AI Modding Go to your extracted game pak, enter .../ReadyOrNot/Config/…, and open AILevelData.ini. Edit the AILevelData.ini file however you would like. Create a new pakchunk mod folder, just as you would with any other mod. However, make sure to add _P to the end of the folder name. Inside that folder, create the directory Config, and put your AILevelData.ini file inside. Pak the mod.Alternatively, you may use this website to generate the mods for you." }, { "title": "Adding Weapons", "url": "/posts/adding_weapons/", "categories": "UAsset Modding", "tags": "weapon, uasset", "date": "2022-07-19 00:00:00 +0000", "snippet": "UAsset Editing: Adding New Weapons (WIP)Tutorial Provided by 0w0-YuiRequirements UAssetGUI/Asset Editor (Reccomend use both to get higher efficiency) UModel/FModel (Recommend UModel Here, FModel includes bugs will affect the modding) python (Optional) JSON Viewer (Optional, I use VS Code) Getting StartPreparations You need a weapon replacement mod first. I will list some definitions before the tutorial start. It will be easier to understand. Save IDT and UI using UModel “Save selected packages”. Navigate to “Game\\Blueprints\\Items\\WeaponRevised”, and export the blueprint of the weapon you’re replacing. Defined_Name Description IDT “Game\\Blueprints\\DataTables\\ItemDataTable.uasset” UI “Game\\ReadyOrNot\\UI\\Planning\\ItemData.uasset” WP-BP “Game\\Blueprints\\Items\\WeaponRevised”(UAssets Exported from this Location) AT-BP “Game\\Blueprints\\Items\\WeaponRevised”(UAssets Exported from this Location) Index The index of weapon in DataTable. (You will need to come up with your own index to replace the Index in the Tutorial, make sure there are no index with the same name in the IDT) Understanding How the Blueprint WorkData include in .uasset, I call it headers Name Map/Header List: Include all object names used in this Blueprint. Import Data/Linked Class: To link other file (Blueprint, Model, Skeleton, etc.) to this Blueprint. Export Data/Code Blocks: Manage external file access to this Blueprint.Data include in .uexp Export Data/Block 1: This is where the data acutally saved..uasset point to .uexp, if you rename the file, they will broken. The right way is open the editor, and use “save as” to rename.Tutorials Close the UAssetGUI open before. Launch the Asset Editor, choose 4.25 at top right. Open IDT. Find the weapon you are replacing at “\\Code Block\\Block 1\\DataTable&lt;WeaponName&gt;”, select it at the left side, and export sub (Edit-&gt;Export Sub) Choose one method Go to the exported sub open it, rename the “\\CoreItem\\NameString” and “CoreItem\\SubTypeString” to Index Import the sub (Edit-&gt;Import sub), rename the index at “\\Code Block\\Block 1\\DataTable”. (You can skip next step 5 if you choose this method) " } ]
